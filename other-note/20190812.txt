1 OOP面向对象：对对象属性的修改只能通过对象内的方法实现。将一切东西都抽象为对象，将所有的行为都抽象为对象的方法。
2 FP函数式编程：不会改变对象的属性，只会输入对象和创建新的对象。不会更改函数外的对象，所有的更新都在函数内进行，输出新的对象。

CAP 分布式 
P分区容错性。
A数据一致性。
C可用性。
由于不同的操作设置在了不同的节点（服务器）上，存在网络延迟故障等。
P：服务A需要操作node1和node2才能实现，为了防止nodeA和nodeB之间发生网络故障而终止服务，因此使用nodeA1和nodeB2对nodeA和nodeB分别作了同步。
A：nodeA和nodeA1的数据要保持一致。
C：nodeA要一一直是可被使用。



https
解决 私钥+公钥的混合加密模式任然存在第一次公钥可能被中间人截获的风险，
是游览器必须保存所有服务器的公钥。
设置权威机构的原因是因为游览器不可能保存所有服务器的公钥。
详解：
http 传输的是未被加密的信息（简称明文）。
客户端发送信息给服务端；
信息需要经历很长的路程才能到达接服务端手中；
路途中，小偷可以通过抓包获取信息中的内容，并且还可以修改信息后再以客户端的身份发给服务端。
服务端接收到信息后，并不知道这条信息是被小偷偷看过的，或者是被修改过的。

那么如何才能不让信息在途中被偷看和被修改呢？
1.通过对称加密，客户端告诉服务端我们之间要传送信息，服务端发送密钥给客户端，然后彼此间通过密钥加密信息后进行传输。
（双方的信息都是被加密过的）（密钥传输中就被小偷截取）（密文与明文字节数基本相等）

2.通过非对称加密，服务端发送公钥给客户端，客户端加密信息发送给服务端。（只有客户端的信息是加密过的）
（只有一方的信息被加密了，非对称密钥对加密报文的信息长度是有要求的）（公钥传输中就被小偷截取篡改）（密文字节数大于明文）（加密解密速度极慢）

3 通过 对称加密 和 非对称加密 两种混合方式。
（公钥传输中就被小偷截取篡改）
办法：游览器保存所有网站的公钥。

4 
游览器只保存几个权威的网站的公钥。 
服务器向权威网站申请证书。
校验：游览器使用权威机构公钥解密证书得到证书签名，并使用hash生成证书签名，得到的证书签名一致，则再使用权威机构公钥解密出服务端的公钥。
